{"version":3,"sources":["components/welcome/Welcome.js","components/clock/Clock.js","components/contact/Contact.js","components/navigation/Navigation.js","jeopardyService.js","components/jeopardy/Jeopardy.js","components/error404/Error404.js","App.js","serviceWorker.js","index.js"],"names":["Welcome","props","className","name","Clock","state","date","Date","this","timerId","setInterval","tick","clearInterval","setState","toLocaleTimeString","Component","Contact","handleChange","event","formData","target","value","handleSubmit","preventDefault","submitted","resetForm","firstName","lastName","onClick","onSubmit","htmlFor","type","onChange","Navigation","to","JeopardyService","url","client","axios","create","get","Jeopardy","newAnswer","answer","updateScore","score","getNewQuestion","data","id","question","category","getQuestion","then","result","placeholder","placehoder","title","JSON","stringify","Error404","App","exact","path","render","match","params","component","Boolean","window","location","hostname","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.29aa71b9.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nfunction Welcome (props) {\r\n    return (\r\n        <div className=\"Welcome\">\r\n            <h1>\r\n            Welcome, {props.name}!\r\n            </h1>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Welcome;","import React, { Component } from 'react';\r\n\r\nclass Clock extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            date: new Date(),\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.timerId = setInterval(() => this.tick(), 1000);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        clearInterval(this.timerId);\r\n    }\r\n\r\n    tick() {\r\n        this.setState({\r\n            date: new Date(),\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"Clock\">\r\n                <h2>It is now {this.state.date.toLocaleTimeString()}.\r\n                </h2>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Clock;","import React, { Component } from 'react';\r\n\r\nclass Contact extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            submitted: false,\r\n            formData: {\r\n                firstName: '',\r\n                lastName: '',\r\n            }\r\n        }\r\n    }\r\n\r\n    handleChange = (event) => {\r\n        const formData = {...this.state.formData};\r\n        formData[event.target.name] = event.target.value;\r\n\r\n        this.setState({ formData });\r\n    }\r\n\r\n    handleSubmit = (event) => {\r\n        event.preventDefault();\r\n\r\n        this.setState({\r\n            submitted: true\r\n        });\r\n    }\r\n\r\n    resetForm = (event) => {\r\n        this.setState({\r\n            submitted: false,\r\n            formData: {\r\n                firstName: '',\r\n                lastName: '',\r\n            }\r\n        });\r\n    }\r\n\r\n    render() {\r\n        if (this.state.submitted) {\r\n            return (\r\n                <div className=\"Contact\">\r\n                    <p>Thank you, {this.state.formData.firstName}, for submitting the form!</p>\r\n                    <button onClick={this.resetForm}>Reset Form</button>\r\n                </div>\r\n            )\r\n        }\r\n\r\n        return (\r\n            <div className=\"contact\">\r\n                <form onSubmit={this.handleSubmit}>\r\n                    <div>\r\n                        <label htmlFor=\"First name\">First name: </label>\r\n                        <input\r\n                            type=\"text\"\r\n                            name=\"firstName\"\r\n                            value={this.state.formData.firstName}\r\n                            onChange={this.handleChange}\r\n                        />\r\n                    </div>\r\n\r\n                    <div>\r\n                        <label htmlFor=\"Last name\">Last name</label>\r\n                        <input\r\n                            type=\"text\"\r\n                            name=\"lastName\"\r\n                            value={this.state.formData.lastName}\r\n                            onChange={this.handleChange}\r\n                        />\r\n                    </div>\r\n\r\n                    <button>Submit Form</button>\r\n\r\n                </form>\r\n\r\n                <div>\r\n                    {this.state.formData.firstName}\r\n                    <br />\r\n                    {this.state.formData.lastName}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Contact;","import React from 'react'\r\nimport { Link } from 'react-router-dom';\r\n\r\nfunction Navigation(props) {\r\n    return (\r\n        <div className=\"Navigation\">\r\n            <ul>\r\n                <li><Link to=\"/\">Home</Link></li>\r\n                <li><Link to=\"clock\">Clock</Link></li>\r\n                <li><Link to=\"contact\">Contact</Link></li>\r\n                <li><Link to=\"/jeopardy\">Jeopardy</Link></li>\r\n            </ul>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Navigation;","//import the axios HTTP client to communicate with the API\r\nimport axios from 'axios';\r\n\r\nclass JeopardyService {\r\n    \r\n    constructor(url = 'http://jservice.io/api/random', client = axios.create()){\r\n        this.url = url;\r\n        this.client = client;\r\n    }\r\n\r\n    getQuestion() {\r\n        return this.client.get(this.url);\r\n    }\r\n\r\n}\r\nexport default JeopardyService;\r\n","import React, { Component } from 'react';\r\n\r\n//import our service\r\nimport JeopardyService from \"../../jeopardyService\";\r\n\r\nclass Jeopardy extends Component {\r\n\r\n  //set our initial state and set up our service as this.client on this component\r\n  constructor(props) {\r\n    super(props);\r\n    this.client = new JeopardyService();\r\n    this.state = {\r\n      data: {\r\n        id: \"\",\r\n        answer: \"\",\r\n        question: \"\",\r\n        value: \"\",\r\n        category: \"\",\r\n        score: 0\r\n      }\r\n    }\r\n  }\r\n\r\n  //when the component mounts (after the first render), get the first question\r\n  componentDidMount() {\r\n    this.getNewQuestion()\r\n  }\r\n\r\n  //get a new random question from the API and add it to the data object in state\r\n  getNewQuestion() {\r\n    return this.client.getQuestion().then(result => {\r\n      this.setState({\r\n        data: result.data[0],\r\n      })\r\n    })\r\n  }\r\n\r\n  //   getNewScore() {\r\n  //     return this.client.getNewScore().then(result => {\r\n  //       this.setState({\r\n  //         newScore: value + this.score\r\n  //       })\r\n  //     })\r\n  //   }\r\n  // }\r\n\r\n  // updateScore = (score) => {\r\n  //   this.setState((state, props) => ({\r\n  //     score: score + this.state.data.value\r\n  //   }))\r\n  // }\r\n\r\n  handleChange = (event) => {\r\n    let newAnswer = event.target.value\r\n    // const { answer } = {...this.state}\r\n    // answer[event.target.value] = event.target.value\r\n    this.setState({ answer: newAnswer })\r\n  }\r\n\r\n\r\n  handleSubmit = (event) => {\r\n    event.preventDefault()\r\n    this.props.updateScore({ ...this.state.score })\r\n    // this.setState({ score: newScore })\r\n    this.getNewQuestion()\r\n  }\r\n\r\n  //display the results on the screen\r\n  render() {\r\n\r\n    // THIS IS CONDITIONAL RENDERING\r\n    // let category = \"loading\";\r\n    // if(this.state.data.category) {\r\n    //   category = this.state.data.category.title\r\n    // }\r\n\r\n    return (\r\n\r\n      <div>\r\n        <strong>Users Score: </strong> {this.state.score} <br />\r\n        <strong>Question: </strong> {this.state.data.question} <br />\r\n\r\n        <form className=\"Answer\">\r\n          <strong>Answer: </strong>\r\n          <input\r\n            name=\"Answer\"\r\n            placeholder=\"Answer\"\r\n            type=\"text\"\r\n            value={this.state.answer}\r\n            onChange={this.handleChange}\r\n          />\r\n          <strong>Score: </strong>\r\n          <input\r\n            name=\"score\"\r\n            placehoder=\"score\"\r\n            type=\"number\"\r\n            value={this.state.data.value}\r\n            onChange={this.handleChange}\r\n          />\r\n          <button>Submit Answer</button>\r\n        </form>\r\n\r\n        <strong>Value</strong> {this.state.data.value} <br />\r\n        <strong>Category: </strong> {this.state.data.category.title}\r\n\r\n        {JSON.stringify(this.state.data.question)}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Jeopardy;","import React from 'react';\r\n\r\nfunction Error404 (props) {\r\n    return (\r\n        <div className=\"Error404\">\r\n            <h1>\r\n            Error 404 - page not found!\r\n            </h1>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Error404;","import React, { Component } from 'react';\nimport { Switch, Route } from \"react-router-dom\";\nimport './App.css'\n\nimport Welcome from \"./components/welcome/Welcome\"\nimport Clock from \"./components/clock/Clock\"\nimport Contact from \"./components/contact/Contact\"\nimport Navigation from \"./components/navigation/Navigation\"\nimport Jeopardy from \"./components/jeopardy/Jeopardy\"\nimport Error404 from \"./components/error404/Error404.js\"\n\n// import { Route, Switch } from \n\nclass App extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      score: \"\"\n    }\n  }\n\n  updateScore = (score) => {\n    this.setState((state, props) => ({\n      score: score + this.state.data.value\n    }))\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n\n        <Navigation />\n\n        <Switch>\n          <Route\n            exact\n            path=\"/\"\n            render={(props) => <Welcome {...props}\n              name=\"Cynthia\" />}\n          />\n\n          <Route\n            path=\"/welcome/:name\"\n            render={(props) => <Welcome {...props}\n              name={props.match.params.name} />}\n          />\n\n          <Route path=\"/clock\" component={Clock} />\n          <Route path=\"/contact\" component={Contact} />\n          <Route path=\"/jeopardy\" component={Jeopardy} />\n\n          <Route component={Error404} />\n        </Switch>\n\n\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { BrowserRouter } from 'react-router-dom';\r\n\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <BrowserRouter>\r\n    <App />\r\n  </BrowserRouter>,\r\n  document.getElementById('root')\r\n);\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();"],"sourceRoot":""}